前端代码统一结构:
header
页面排版
页面专用模板（隐藏）
页面全局变量脚本（记录url的传值或某个状态）
数据交换函数脚本（下载/上传，上传函数包括重载板块的功能）
功能型函数脚本
量产子板块函数脚本
大板块加载函数脚本（包括触发事件定义）
页面流程加载脚本

用户输入区域:
单一输入不使用form
多个输入使用form

短内容使用get，仅长内容使用post
前端代码不考虑数据安全，仅考虑用户体验
提交信息并刷新/重载页面的行为统一打包成函数
所有板块的无数据状态统一显示为加载转圈图标
所有板块的加载（不论是否需要下载内容，都需要写对应的load函数）
按钮等绑定的操作也放在load函数中，而不是单独写出来
load函数不再判断空值情况，而是只在获取数据后执行，获取数据前的页面是静态信息（如固定的加载动画等）

url规则:
主页:https://www.haishi.cool
文章列表:https://www.haishi.cool/list/type/start
文章:https://www.haishi.cool/article/id/start
发主题帖:https://www.haishi.cool/post/topic
用户主页:https://www.haishi.cool/user/id
发帖历史:https://www.haishi.cool/record/id
搜索:https://www.haishi.cool/search/搜索内容

收到的赞:https://www.haishi.cool/message/like
收到的回复:https://www.haishi.cool/message/comment
私信:https://www.haishi.cool/message/whisper/rid(收信人id)

注册:https://www.haishi.cool/signup
登录:https://www.haishi.cool/login

url设计规范:https://blog.csdn.net/lucky541788/article/details/81836466
'/'用于切分页面,形成树形结构,这里切分的数据可以用于定位页面的html文件,也可以用于获取指定的后端数据
'#'用于指定页面载入后跳转到哪个位置
'?'用于动态页面,数据是固定的,仅用于生成不同的样式,这里的数据是只给前端用的
'&'链接符号,用于链接问号后不同的参数



以后需要将页面前的引用js也进行模块化，在一个文件统一写引用，然后页面引用这个文件

前端需要的数据确定后,后端的sql语句抛弃select *, 只选取需要用到的进行传输

所有引用(.html .php .js)全部改成rooturl+目录 的形式

数据库规范
id类的默认值是null其他默认值必须是空


后端接口安全校验流程:
验证用户token令牌(由log_state_ini.php颁发给用户,游客也拥有token,信息包括ip,如果ip与用户ip不统一,则就拒绝服务)
//token现在看来好像没有必要,因为session可以替代token,初始化时设置session,使用接口时检查session
检查用户权限(封禁用户/游客/普通用户/管理员)
用户只能以自己的身份进行操作(涉及到当前用户的信息只用session里的数据)
检查用户调用接口频率(redis储存)
检查数据的合法性(防止意外传入非法数据)
